
Final_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000087a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000036  00800060  0000087a  0000090e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800096  00800096  00000944  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000944  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000974  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  000009b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012a5  00000000  00000000  00000aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ac1  00000000  00000000  00001d4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b78  00000000  00000000  0000280e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000238  00000000  00000000  00003388  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000498  00000000  00000000  000035c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bc7  00000000  00000000  00003a58  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  0000461f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 84 03 	jmp	0x708	; 0x708 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e7       	ldi	r30, 0x7A	; 122
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 39       	cpi	r26, 0x96	; 150
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e9       	ldi	r26, 0x96	; 150
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 39       	cpi	r26, 0x98	; 152
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <main>
  8a:	0c 94 3b 04 	jmp	0x876	; 0x876 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <keypad_init>:
						   {'1', '2', '3', '-'},   
						   {'C', '0', '=', '+'}};

void keypad_init(void)
{
	SET_BIT(DDRC, 2);     //row is output
  92:	84 b3       	in	r24, 0x14	; 20
  94:	84 60       	ori	r24, 0x04	; 4
  96:	84 bb       	out	0x14, r24	; 20
	SET_BIT(DDRC, 3);
  98:	84 b3       	in	r24, 0x14	; 20
  9a:	88 60       	ori	r24, 0x08	; 8
  9c:	84 bb       	out	0x14, r24	; 20
	SET_BIT(DDRC, 4);
  9e:	84 b3       	in	r24, 0x14	; 20
  a0:	80 61       	ori	r24, 0x10	; 16
  a2:	84 bb       	out	0x14, r24	; 20
	SET_BIT(DDRC, 5);
  a4:	84 b3       	in	r24, 0x14	; 20
  a6:	80 62       	ori	r24, 0x20	; 32
  a8:	84 bb       	out	0x14, r24	; 20
	
	CLR_BIT(DDRD, 7);     // column is input
  aa:	81 b3       	in	r24, 0x11	; 17
  ac:	8f 77       	andi	r24, 0x7F	; 127
  ae:	81 bb       	out	0x11, r24	; 17
	CLR_BIT(DDRD, 6);
  b0:	81 b3       	in	r24, 0x11	; 17
  b2:	8f 7b       	andi	r24, 0xBF	; 191
  b4:	81 bb       	out	0x11, r24	; 17
	CLR_BIT(DDRD, 5);
  b6:	81 b3       	in	r24, 0x11	; 17
  b8:	8f 7d       	andi	r24, 0xDF	; 223
  ba:	81 bb       	out	0x11, r24	; 17
	CLR_BIT(DDRD, 3);
  bc:	81 b3       	in	r24, 0x11	; 17
  be:	87 7f       	andi	r24, 0xF7	; 247
  c0:	81 bb       	out	0x11, r24	; 17
	
	SET_BIT(PORTD, 7);
  c2:	82 b3       	in	r24, 0x12	; 18
  c4:	80 68       	ori	r24, 0x80	; 128
  c6:	82 bb       	out	0x12, r24	; 18
	SET_BIT(PORTD, 6);
  c8:	82 b3       	in	r24, 0x12	; 18
  ca:	80 64       	ori	r24, 0x40	; 64
  cc:	82 bb       	out	0x12, r24	; 18
	SET_BIT(PORTD, 5);
  ce:	82 b3       	in	r24, 0x12	; 18
  d0:	80 62       	ori	r24, 0x20	; 32
  d2:	82 bb       	out	0x12, r24	; 18
	SET_BIT(PORTD, 3);
  d4:	82 b3       	in	r24, 0x12	; 18
  d6:	88 60       	ori	r24, 0x08	; 8
  d8:	82 bb       	out	0x12, r24	; 18
  da:	08 95       	ret

000000dc <keypad_get_value>:
}
unsigned char keypad_get_value(void)
{
	unsigned char ans = invalid_char;
	
	for (int row = 5; row >= 2; row --)
  dc:	65 e0       	ldi	r22, 0x05	; 5
  de:	70 e0       	ldi	r23, 0x00	; 0
	SET_BIT(PORTD, 5);
	SET_BIT(PORTD, 3);
}
unsigned char keypad_get_value(void)
{
	unsigned char ans = invalid_char;
  e0:	8f ef       	ldi	r24, 0xFF	; 255
	
	for (int row = 5; row >= 2; row --)
  e2:	64 c0       	rjmp	.+200    	; 0x1ac <keypad_get_value+0xd0>
	{
		PORTC |= 0b00111100;
  e4:	95 b3       	in	r25, 0x15	; 21
  e6:	9c 63       	ori	r25, 0x3C	; 60
  e8:	95 bb       	out	0x15, r25	; 21
		CLR_BIT(PORTC, row);
  ea:	95 b3       	in	r25, 0x15	; 21
  ec:	21 e0       	ldi	r18, 0x01	; 1
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	06 2e       	mov	r0, r22
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <keypad_get_value+0x1c>
  f4:	22 0f       	add	r18, r18
  f6:	33 1f       	adc	r19, r19
  f8:	0a 94       	dec	r0
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <keypad_get_value+0x18>
  fc:	20 95       	com	r18
  fe:	29 23       	and	r18, r25
 100:	25 bb       	out	0x15, r18	; 21
		for (int col = 7; col >= 3; col --)
 102:	27 e0       	ldi	r18, 0x07	; 7
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	4c c0       	rjmp	.+152    	; 0x1a0 <keypad_get_value+0xc4>
		{
			if(col == 4) col --;
 108:	24 30       	cpi	r18, 0x04	; 4
 10a:	31 05       	cpc	r19, r1
 10c:	11 f4       	brne	.+4      	; 0x112 <keypad_get_value+0x36>
 10e:	21 50       	subi	r18, 0x01	; 1
 110:	31 09       	sbc	r19, r1
			if(GET_BIT(PIND, col) == 0)
 112:	40 b3       	in	r20, 0x10	; 16
 114:	50 e0       	ldi	r21, 0x00	; 0
 116:	02 2e       	mov	r0, r18
 118:	02 c0       	rjmp	.+4      	; 0x11e <keypad_get_value+0x42>
 11a:	55 95       	asr	r21
 11c:	47 95       	ror	r20
 11e:	0a 94       	dec	r0
 120:	e2 f7       	brpl	.-8      	; 0x11a <keypad_get_value+0x3e>
 122:	40 fd       	sbrc	r20, 0
 124:	3b c0       	rjmp	.+118    	; 0x19c <keypad_get_value+0xc0>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 126:	4f ef       	ldi	r20, 0xFF	; 255
 128:	51 ee       	ldi	r21, 0xE1	; 225
 12a:	94 e0       	ldi	r25, 0x04	; 4
 12c:	41 50       	subi	r20, 0x01	; 1
 12e:	50 40       	sbci	r21, 0x00	; 0
 130:	90 40       	sbci	r25, 0x00	; 0
 132:	e1 f7       	brne	.-8      	; 0x12c <keypad_get_value+0x50>
 134:	00 c0       	rjmp	.+0      	; 0x136 <keypad_get_value+0x5a>
 136:	00 00       	nop
			{
				_delay_ms(100);
				if(GET_BIT(PIND, col) == 0)
 138:	40 b3       	in	r20, 0x10	; 16
 13a:	50 e0       	ldi	r21, 0x00	; 0
 13c:	02 2e       	mov	r0, r18
 13e:	02 c0       	rjmp	.+4      	; 0x144 <keypad_get_value+0x68>
 140:	55 95       	asr	r21
 142:	47 95       	ror	r20
 144:	0a 94       	dec	r0
 146:	e2 f7       	brpl	.-8      	; 0x140 <keypad_get_value+0x64>
 148:	40 fd       	sbrc	r20, 0
 14a:	28 c0       	rjmp	.+80     	; 0x19c <keypad_get_value+0xc0>
				{
					if(col == 3) ans = arr[5 - row][7 - col - 1];
 14c:	23 30       	cpi	r18, 0x03	; 3
 14e:	31 05       	cpc	r19, r1
 150:	99 f4       	brne	.+38     	; 0x178 <keypad_get_value+0x9c>
 152:	85 e0       	ldi	r24, 0x05	; 5
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	86 1b       	sub	r24, r22
 158:	97 0b       	sbc	r25, r23
 15a:	46 e0       	ldi	r20, 0x06	; 6
 15c:	50 e0       	ldi	r21, 0x00	; 0
 15e:	42 1b       	sub	r20, r18
 160:	53 0b       	sbc	r21, r19
 162:	88 0f       	add	r24, r24
 164:	99 1f       	adc	r25, r25
 166:	88 0f       	add	r24, r24
 168:	99 1f       	adc	r25, r25
 16a:	80 5a       	subi	r24, 0xA0	; 160
 16c:	9f 4f       	sbci	r25, 0xFF	; 255
 16e:	fc 01       	movw	r30, r24
 170:	e4 0f       	add	r30, r20
 172:	f5 1f       	adc	r31, r21
 174:	80 81       	ld	r24, Z
 176:	12 c0       	rjmp	.+36     	; 0x19c <keypad_get_value+0xc0>
					else ans = arr[5 - row][7 - col];
 178:	85 e0       	ldi	r24, 0x05	; 5
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	86 1b       	sub	r24, r22
 17e:	97 0b       	sbc	r25, r23
 180:	47 e0       	ldi	r20, 0x07	; 7
 182:	50 e0       	ldi	r21, 0x00	; 0
 184:	42 1b       	sub	r20, r18
 186:	53 0b       	sbc	r21, r19
 188:	88 0f       	add	r24, r24
 18a:	99 1f       	adc	r25, r25
 18c:	88 0f       	add	r24, r24
 18e:	99 1f       	adc	r25, r25
 190:	80 5a       	subi	r24, 0xA0	; 160
 192:	9f 4f       	sbci	r25, 0xFF	; 255
 194:	fc 01       	movw	r30, r24
 196:	e4 0f       	add	r30, r20
 198:	f5 1f       	adc	r31, r21
 19a:	80 81       	ld	r24, Z
	
	for (int row = 5; row >= 2; row --)
	{
		PORTC |= 0b00111100;
		CLR_BIT(PORTC, row);
		for (int col = 7; col >= 3; col --)
 19c:	21 50       	subi	r18, 0x01	; 1
 19e:	31 09       	sbc	r19, r1
 1a0:	23 30       	cpi	r18, 0x03	; 3
 1a2:	31 05       	cpc	r19, r1
 1a4:	0c f0       	brlt	.+2      	; 0x1a8 <keypad_get_value+0xcc>
 1a6:	b0 cf       	rjmp	.-160    	; 0x108 <keypad_get_value+0x2c>
}
unsigned char keypad_get_value(void)
{
	unsigned char ans = invalid_char;
	
	for (int row = 5; row >= 2; row --)
 1a8:	61 50       	subi	r22, 0x01	; 1
 1aa:	71 09       	sbc	r23, r1
 1ac:	62 30       	cpi	r22, 0x02	; 2
 1ae:	71 05       	cpc	r23, r1
 1b0:	0c f0       	brlt	.+2      	; 0x1b4 <keypad_get_value+0xd8>
 1b2:	98 cf       	rjmp	.-208    	; 0xe4 <keypad_get_value+0x8>
				}
			}
		}
	}
	return ans;
 1b4:	08 95       	ret

000001b6 <LCD_command>:
	LCD_command(0x80); //Force the cursor to the beginning of the 1st line
}

void LCD_command(unsigned char cmd)
{
	CLR_BIT(LCD_Command_PORT, RS); // Clearing RS ->  Write to command register
 1b6:	9b b3       	in	r25, 0x1b	; 27
 1b8:	97 7f       	andi	r25, 0xF7	; 247
 1ba:	9b bb       	out	0x1b, r25	; 27
	
	LCD_Data_PORT &= 0b11101000;
 1bc:	98 b3       	in	r25, 0x18	; 24
 1be:	98 7e       	andi	r25, 0xE8	; 232
 1c0:	98 bb       	out	0x18, r25	; 24
	unsigned char high = ((cmd & 0xf0) >> 4);
 1c2:	28 2f       	mov	r18, r24
 1c4:	22 95       	swap	r18
 1c6:	2f 70       	andi	r18, 0x0F	; 15
	unsigned char tmp  = (((high & 0b00001000) << 1) | (high & 0b00000111));
 1c8:	92 2f       	mov	r25, r18
 1ca:	98 70       	andi	r25, 0x08	; 8
 1cc:	49 2f       	mov	r20, r25
 1ce:	50 e0       	ldi	r21, 0x00	; 0
 1d0:	44 0f       	add	r20, r20
 1d2:	55 1f       	adc	r21, r21
 1d4:	27 70       	andi	r18, 0x07	; 7
 1d6:	42 2b       	or	r20, r18
	LCD_Data_PORT |= tmp;
 1d8:	98 b3       	in	r25, 0x18	; 24
 1da:	49 2b       	or	r20, r25
 1dc:	48 bb       	out	0x18, r20	; 24
	CLR_BIT(LCD_Command_PORT, E);
 1de:	9b b3       	in	r25, 0x1b	; 27
 1e0:	9b 7f       	andi	r25, 0xFB	; 251
 1e2:	9b bb       	out	0x1b, r25	; 27
	SET_BIT(LCD_Command_PORT, E);
 1e4:	9b b3       	in	r25, 0x1b	; 27
 1e6:	94 60       	ori	r25, 0x04	; 4
 1e8:	9b bb       	out	0x1b, r25	; 27
 1ea:	ef e9       	ldi	r30, 0x9F	; 159
 1ec:	ff e0       	ldi	r31, 0x0F	; 15
 1ee:	31 97       	sbiw	r30, 0x01	; 1
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <LCD_command+0x38>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <LCD_command+0x3e>
 1f4:	00 00       	nop
	_delay_ms(1);
	CLR_BIT(LCD_Command_PORT, E);
 1f6:	9b b3       	in	r25, 0x1b	; 27
 1f8:	9b 7f       	andi	r25, 0xFB	; 251
 1fa:	9b bb       	out	0x1b, r25	; 27
	
	
	LCD_Data_PORT &= 0b11101000;
 1fc:	98 b3       	in	r25, 0x18	; 24
 1fe:	98 7e       	andi	r25, 0xE8	; 232
 200:	98 bb       	out	0x18, r25	; 24
	unsigned char low = (cmd & 0x0f);
	unsigned char tmp2  = (((low & 0b00001000) << 1) | (low & 0b00000111));
 202:	98 2f       	mov	r25, r24
 204:	98 70       	andi	r25, 0x08	; 8
 206:	29 2f       	mov	r18, r25
 208:	30 e0       	ldi	r19, 0x00	; 0
 20a:	22 0f       	add	r18, r18
 20c:	33 1f       	adc	r19, r19
 20e:	87 70       	andi	r24, 0x07	; 7
 210:	28 2b       	or	r18, r24
	LCD_Data_PORT |= tmp2;
 212:	88 b3       	in	r24, 0x18	; 24
 214:	28 2b       	or	r18, r24
 216:	28 bb       	out	0x18, r18	; 24
	CLR_BIT(LCD_Command_PORT, 2);
 218:	8b b3       	in	r24, 0x1b	; 27
 21a:	8b 7f       	andi	r24, 0xFB	; 251
 21c:	8b bb       	out	0x1b, r24	; 27
	SET_BIT(LCD_Command_PORT, 2);
 21e:	8b b3       	in	r24, 0x1b	; 27
 220:	84 60       	ori	r24, 0x04	; 4
 222:	8b bb       	out	0x1b, r24	; 27
 224:	8f e9       	ldi	r24, 0x9F	; 159
 226:	9f e0       	ldi	r25, 0x0F	; 15
 228:	01 97       	sbiw	r24, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <LCD_command+0x72>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <LCD_command+0x78>
 22e:	00 00       	nop
	_delay_ms(1); 
	CLR_BIT(LCD_Command_PORT, 2);
 230:	8b b3       	in	r24, 0x1b	; 27
 232:	8b 7f       	andi	r24, 0xFB	; 251
 234:	8b bb       	out	0x1b, r24	; 27
 236:	ef e1       	ldi	r30, 0x1F	; 31
 238:	fe e4       	ldi	r31, 0x4E	; 78
 23a:	31 97       	sbiw	r30, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <LCD_command+0x84>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <LCD_command+0x8a>
 240:	00 00       	nop
 242:	08 95       	ret

00000244 <LCD_init>:



void LCD_init(void)
{
	SET_BIT(LCD_Command_DDR, 3);
 244:	8a b3       	in	r24, 0x1a	; 26
 246:	88 60       	ori	r24, 0x08	; 8
 248:	8a bb       	out	0x1a, r24	; 26
	SET_BIT(LCD_Command_DDR, 2);
 24a:	8a b3       	in	r24, 0x1a	; 26
 24c:	84 60       	ori	r24, 0x04	; 4
 24e:	8a bb       	out	0x1a, r24	; 26
	
	SET_BIT(LCD_Data_DDR, 0);
 250:	87 b3       	in	r24, 0x17	; 23
 252:	81 60       	ori	r24, 0x01	; 1
 254:	87 bb       	out	0x17, r24	; 23
	SET_BIT(LCD_Data_DDR, 1);
 256:	87 b3       	in	r24, 0x17	; 23
 258:	82 60       	ori	r24, 0x02	; 2
 25a:	87 bb       	out	0x17, r24	; 23
	SET_BIT(LCD_Data_DDR, 2);
 25c:	87 b3       	in	r24, 0x17	; 23
 25e:	84 60       	ori	r24, 0x04	; 4
 260:	87 bb       	out	0x17, r24	; 23
	SET_BIT(LCD_Data_DDR, 4);
 262:	87 b3       	in	r24, 0x17	; 23
 264:	80 61       	ori	r24, 0x10	; 16
 266:	87 bb       	out	0x17, r24	; 23
 268:	8f e5       	ldi	r24, 0x5F	; 95
 26a:	9a ee       	ldi	r25, 0xEA	; 234
 26c:	01 97       	sbiw	r24, 0x01	; 1
 26e:	f1 f7       	brne	.-4      	; 0x26c <LCD_init+0x28>
 270:	00 c0       	rjmp	.+0      	; 0x272 <LCD_init+0x2e>
 272:	00 00       	nop
	
	_delay_ms(15); 
	LCD_command(0x02);
 274:	82 e0       	ldi	r24, 0x02	; 2
 276:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_command>
	LCD_command(0x28);
 27a:	88 e2       	ldi	r24, 0x28	; 40
 27c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_command>
	
	LCD_command(0x0c); // Dispaly on, cursor off
 280:	8c e0       	ldi	r24, 0x0C	; 12
 282:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_command>
	LCD_command(0x01); // Clear the display screen
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_command>
	LCD_command(0x80); //Force the cursor to the beginning of the 1st line
 28c:	80 e8       	ldi	r24, 0x80	; 128
 28e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_command>
 292:	08 95       	ret

00000294 <LCD_writeChar>:
	_delay_ms(5);
}

void LCD_writeChar(unsigned char chr)
{
	SET_BIT(LCD_Command_PORT, 3); // Setting RS ->  Write to Data register
 294:	9b b3       	in	r25, 0x1b	; 27
 296:	98 60       	ori	r25, 0x08	; 8
 298:	9b bb       	out	0x1b, r25	; 27
	
	LCD_Data_PORT &= 0b11101000;
 29a:	98 b3       	in	r25, 0x18	; 24
 29c:	98 7e       	andi	r25, 0xE8	; 232
 29e:	98 bb       	out	0x18, r25	; 24
	unsigned char high = ((chr & 0xf0) >> 4);
 2a0:	28 2f       	mov	r18, r24
 2a2:	22 95       	swap	r18
 2a4:	2f 70       	andi	r18, 0x0F	; 15
	unsigned char tmp  = (((high & 0b00001000) << 1) | (high & 0b00000111));
 2a6:	92 2f       	mov	r25, r18
 2a8:	98 70       	andi	r25, 0x08	; 8
 2aa:	49 2f       	mov	r20, r25
 2ac:	50 e0       	ldi	r21, 0x00	; 0
 2ae:	44 0f       	add	r20, r20
 2b0:	55 1f       	adc	r21, r21
 2b2:	27 70       	andi	r18, 0x07	; 7
 2b4:	42 2b       	or	r20, r18
	LCD_Data_PORT |= tmp;
 2b6:	98 b3       	in	r25, 0x18	; 24
 2b8:	49 2b       	or	r20, r25
 2ba:	48 bb       	out	0x18, r20	; 24
	CLR_BIT(LCD_Command_PORT, 2);
 2bc:	9b b3       	in	r25, 0x1b	; 27
 2be:	9b 7f       	andi	r25, 0xFB	; 251
 2c0:	9b bb       	out	0x1b, r25	; 27
	SET_BIT(LCD_Command_PORT, 2);
 2c2:	9b b3       	in	r25, 0x1b	; 27
 2c4:	94 60       	ori	r25, 0x04	; 4
 2c6:	9b bb       	out	0x1b, r25	; 27
 2c8:	ef e9       	ldi	r30, 0x9F	; 159
 2ca:	ff e0       	ldi	r31, 0x0F	; 15
 2cc:	31 97       	sbiw	r30, 0x01	; 1
 2ce:	f1 f7       	brne	.-4      	; 0x2cc <LCD_writeChar+0x38>
 2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <LCD_writeChar+0x3e>
 2d2:	00 00       	nop
	_delay_ms(1);
	CLR_BIT(LCD_Command_PORT, 2);
 2d4:	9b b3       	in	r25, 0x1b	; 27
 2d6:	9b 7f       	andi	r25, 0xFB	; 251
 2d8:	9b bb       	out	0x1b, r25	; 27
	
	
	LCD_Data_PORT &= 0b11101000;
 2da:	98 b3       	in	r25, 0x18	; 24
 2dc:	98 7e       	andi	r25, 0xE8	; 232
 2de:	98 bb       	out	0x18, r25	; 24
	unsigned char low = (chr & 0x0f);
	unsigned char tmp2  = (((low & 0b00001000) << 1) | (low & 0b00000111));
 2e0:	98 2f       	mov	r25, r24
 2e2:	98 70       	andi	r25, 0x08	; 8
 2e4:	29 2f       	mov	r18, r25
 2e6:	30 e0       	ldi	r19, 0x00	; 0
 2e8:	22 0f       	add	r18, r18
 2ea:	33 1f       	adc	r19, r19
 2ec:	87 70       	andi	r24, 0x07	; 7
 2ee:	28 2b       	or	r18, r24
	LCD_Data_PORT |= tmp2;
 2f0:	88 b3       	in	r24, 0x18	; 24
 2f2:	28 2b       	or	r18, r24
 2f4:	28 bb       	out	0x18, r18	; 24
	CLR_BIT(LCD_Command_PORT, 2);
 2f6:	8b b3       	in	r24, 0x1b	; 27
 2f8:	8b 7f       	andi	r24, 0xFB	; 251
 2fa:	8b bb       	out	0x1b, r24	; 27
	SET_BIT(LCD_Command_PORT, 2);
 2fc:	8b b3       	in	r24, 0x1b	; 27
 2fe:	84 60       	ori	r24, 0x04	; 4
 300:	8b bb       	out	0x1b, r24	; 27
 302:	8f e9       	ldi	r24, 0x9F	; 159
 304:	9f e0       	ldi	r25, 0x0F	; 15
 306:	01 97       	sbiw	r24, 0x01	; 1
 308:	f1 f7       	brne	.-4      	; 0x306 <LCD_writeChar+0x72>
 30a:	00 c0       	rjmp	.+0      	; 0x30c <LCD_writeChar+0x78>
 30c:	00 00       	nop
	_delay_ms(1);
	CLR_BIT(LCD_Command_PORT, 2);
 30e:	8b b3       	in	r24, 0x1b	; 27
 310:	8b 7f       	andi	r24, 0xFB	; 251
 312:	8b bb       	out	0x1b, r24	; 27
 314:	ef e1       	ldi	r30, 0x1F	; 31
 316:	fe e4       	ldi	r31, 0x4E	; 78
 318:	31 97       	sbiw	r30, 0x01	; 1
 31a:	f1 f7       	brne	.-4      	; 0x318 <LCD_writeChar+0x84>
 31c:	00 c0       	rjmp	.+0      	; 0x31e <LCD_writeChar+0x8a>
 31e:	00 00       	nop
 320:	08 95       	ret

00000322 <LCD_string>:
	
	_delay_ms(5);
}

void LCD_string(unsigned char* str)
{
 322:	0f 93       	push	r16
 324:	1f 93       	push	r17
 326:	cf 93       	push	r28
 328:	df 93       	push	r29
 32a:	8c 01       	movw	r16, r24
	for(int i = 0; str[i] != '\0'; i ++) {
 32c:	c0 e0       	ldi	r28, 0x00	; 0
 32e:	d0 e0       	ldi	r29, 0x00	; 0
 330:	03 c0       	rjmp	.+6      	; 0x338 <LCD_string+0x16>
		LCD_writeChar(str[i]);
 332:	0e 94 4a 01 	call	0x294	; 0x294 <LCD_writeChar>
	_delay_ms(5);
}

void LCD_string(unsigned char* str)
{
	for(int i = 0; str[i] != '\0'; i ++) {
 336:	21 96       	adiw	r28, 0x01	; 1
 338:	f8 01       	movw	r30, r16
 33a:	ec 0f       	add	r30, r28
 33c:	fd 1f       	adc	r31, r29
 33e:	80 81       	ld	r24, Z
 340:	81 11       	cpse	r24, r1
 342:	f7 cf       	rjmp	.-18     	; 0x332 <LCD_string+0x10>
		LCD_writeChar(str[i]);
	}
}
 344:	df 91       	pop	r29
 346:	cf 91       	pop	r28
 348:	1f 91       	pop	r17
 34a:	0f 91       	pop	r16
 34c:	08 95       	ret

0000034e <LCD_clear>:

void LCD_clear(void)
{
	LCD_command(0x01);
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_command>
 354:	08 95       	ret

00000356 <bubbleSort>:
#include "Timer.h"
#include "LCD.h"
#include "Registers.h"
#include "BIT_MATH.h"
//int g_tick = 0, numbers[100], pos = 0;
void bubbleSort(int arr[], int n) {
 356:	0f 93       	push	r16
 358:	1f 93       	push	r17
 35a:	cf 93       	push	r28
 35c:	df 93       	push	r29
	int i, j;
	for (i = 0; i < n - 1; i++) {
 35e:	c0 e0       	ldi	r28, 0x00	; 0
 360:	d0 e0       	ldi	r29, 0x00	; 0
 362:	25 c0       	rjmp	.+74     	; 0x3ae <bubbleSort+0x58>
		for (j = 0; j < n - i - 1; j++) {
			if (arr[j] > arr[j + 1]) {
 364:	d9 01       	movw	r26, r18
 366:	aa 0f       	add	r26, r26
 368:	bb 1f       	adc	r27, r27
 36a:	a8 0f       	add	r26, r24
 36c:	b9 1f       	adc	r27, r25
 36e:	4d 91       	ld	r20, X+
 370:	5c 91       	ld	r21, X
 372:	11 97       	sbiw	r26, 0x01	; 1
 374:	f9 01       	movw	r30, r18
 376:	31 96       	adiw	r30, 0x01	; 1
 378:	ee 0f       	add	r30, r30
 37a:	ff 1f       	adc	r31, r31
 37c:	e8 0f       	add	r30, r24
 37e:	f9 1f       	adc	r31, r25
 380:	00 81       	ld	r16, Z
 382:	11 81       	ldd	r17, Z+1	; 0x01
 384:	04 17       	cp	r16, r20
 386:	15 07       	cpc	r17, r21
 388:	24 f4       	brge	.+8      	; 0x392 <bubbleSort+0x3c>
				int temp = arr[j];
				arr[j] = arr[j + 1];
 38a:	0d 93       	st	X+, r16
 38c:	1c 93       	st	X, r17
				arr[j + 1] = temp;
 38e:	51 83       	std	Z+1, r21	; 0x01
 390:	40 83       	st	Z, r20
#include "BIT_MATH.h"
//int g_tick = 0, numbers[100], pos = 0;
void bubbleSort(int arr[], int n) {
	int i, j;
	for (i = 0; i < n - 1; i++) {
		for (j = 0; j < n - i - 1; j++) {
 392:	2f 5f       	subi	r18, 0xFF	; 255
 394:	3f 4f       	sbci	r19, 0xFF	; 255
 396:	02 c0       	rjmp	.+4      	; 0x39c <bubbleSort+0x46>
 398:	20 e0       	ldi	r18, 0x00	; 0
 39a:	30 e0       	ldi	r19, 0x00	; 0
 39c:	ab 01       	movw	r20, r22
 39e:	4c 1b       	sub	r20, r28
 3a0:	5d 0b       	sbc	r21, r29
 3a2:	41 50       	subi	r20, 0x01	; 1
 3a4:	51 09       	sbc	r21, r1
 3a6:	24 17       	cp	r18, r20
 3a8:	35 07       	cpc	r19, r21
 3aa:	e4 f2       	brlt	.-72     	; 0x364 <bubbleSort+0xe>
#include "Registers.h"
#include "BIT_MATH.h"
//int g_tick = 0, numbers[100], pos = 0;
void bubbleSort(int arr[], int n) {
	int i, j;
	for (i = 0; i < n - 1; i++) {
 3ac:	21 96       	adiw	r28, 0x01	; 1
 3ae:	9b 01       	movw	r18, r22
 3b0:	21 50       	subi	r18, 0x01	; 1
 3b2:	31 09       	sbc	r19, r1
 3b4:	c2 17       	cp	r28, r18
 3b6:	d3 07       	cpc	r29, r19
 3b8:	7c f3       	brlt	.-34     	; 0x398 <bubbleSort+0x42>
				arr[j] = arr[j + 1];
				arr[j + 1] = temp;
			}
		}
	}
}
 3ba:	df 91       	pop	r29
 3bc:	cf 91       	pop	r28
 3be:	1f 91       	pop	r17
 3c0:	0f 91       	pop	r16
 3c2:	08 95       	ret

000003c4 <main>:

int main(void)
{
 3c4:	cf 92       	push	r12
 3c6:	df 92       	push	r13
 3c8:	ef 92       	push	r14
 3ca:	ff 92       	push	r15
 3cc:	0f 93       	push	r16
 3ce:	1f 93       	push	r17
 3d0:	cf 93       	push	r28
 3d2:	df 93       	push	r29
 3d4:	cd b7       	in	r28, 0x3d	; 61
 3d6:	de b7       	in	r29, 0x3e	; 62
 3d8:	c0 5d       	subi	r28, 0xD0	; 208
 3da:	d1 09       	sbc	r29, r1
 3dc:	0f b6       	in	r0, 0x3f	; 63
 3de:	f8 94       	cli
 3e0:	de bf       	out	0x3e, r29	; 62
 3e2:	0f be       	out	0x3f, r0	; 63
 3e4:	cd bf       	out	0x3d, r28	; 61
	SEVEN_SEG_INIT();
 3e6:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <SEVEN_SEG_INIT>
	keypad_init();
 3ea:	0e 94 49 00 	call	0x92	; 0x92 <keypad_init>
	LCD_init();
 3ee:	0e 94 22 01 	call	0x244	; 0x244 <LCD_init>
    unsigned char str[4];  // Array Of Characters For The 4-Digit Numbers, Every Index Contains A Digit.
	int i = 0; // Index Used To Point On The Next Empty Place In "str".
	
	///////////////////////////////////// Getting The Input Via The KeyPad. /////////////////////////////////////
	
	LCD_string("ENTER NUMBER: ");
 3f2:	80 e7       	ldi	r24, 0x70	; 112
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	0e 94 91 01 	call	0x322	; 0x322 <LCD_string>
	SEVEN_SEG_INIT();
	keypad_init();
	LCD_init();
	int index = 0, numbers[100];
    unsigned char str[4];  // Array Of Characters For The 4-Digit Numbers, Every Index Contains A Digit.
	int i = 0; // Index Used To Point On The Next Empty Place In "str".
 3fa:	e1 2c       	mov	r14, r1
 3fc:	f1 2c       	mov	r15, r1
int main(void)
{
	SEVEN_SEG_INIT();
	keypad_init();
	LCD_init();
	int index = 0, numbers[100];
 3fe:	00 e0       	ldi	r16, 0x00	; 0
 400:	10 e0       	ldi	r17, 0x00	; 0
	LCD_string("ENTER NUMBER: ");
	
	while (1)
	{
		
		unsigned char value = keypad_get_value(); // Receiving A Character Via The KeyPad.
 402:	0e 94 6e 00 	call	0xdc	; 0xdc <keypad_get_value>
		
		if(value != invalid_char) // Checks If The Input Character Is Valid.
 406:	8f 3f       	cpi	r24, 0xFF	; 255
 408:	e1 f3       	breq	.-8      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
		{
			
			if(value == '=') { // If The Input Character Is '=' Then Stop Accepting Input And Go For Sorting And Displaying After break Statement.
 40a:	8d 33       	cpi	r24, 0x3D	; 61
 40c:	e1 f5       	brne	.+120    	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
				
				////// Just Confirming To Receive The Number On LCD  Before Breaking If The User Did Not Press C. //////
				
				if( i > 0) { // If The User Willed To Terminate The Input Process And The LCD Have Some Digits Still Not Confirmed, 
 40e:	1e 14       	cp	r1, r14
 410:	1f 04       	cpc	r1, r15
 412:	fc f4       	brge	.+62     	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
							 // This Condition Will Make Sure Confirming It.. So If The "i" Variable Has Some But Zero This Means There Is Characters 
							 // On The LCD.
							 
					if(i < 4) str[i] = '\0'; // Making Sure That The Null Terminator After the Last Digit.. 
 414:	24 e0       	ldi	r18, 0x04	; 4
 416:	e2 16       	cp	r14, r18
 418:	f1 04       	cpc	r15, r1
 41a:	3c f4       	brge	.+14     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 41c:	e9 ec       	ldi	r30, 0xC9	; 201
 41e:	f0 e0       	ldi	r31, 0x00	; 0
 420:	ec 0f       	add	r30, r28
 422:	fd 1f       	adc	r31, r29
 424:	ee 0d       	add	r30, r14
 426:	ff 1d       	adc	r31, r15
 428:	10 82       	st	Z, r1
											 // This Made To Avoid The Converting From Array Of Characters To Integer value Problems.
											 
					numbers[index ++] = atoi(str); // Convert From Array Of Characters To Integer Value And Store The Integer Value Into The Proper Place.  
 42a:	78 01       	movw	r14, r16
 42c:	8f ef       	ldi	r24, 0xFF	; 255
 42e:	e8 1a       	sub	r14, r24
 430:	f8 0a       	sbc	r15, r24
 432:	ce 01       	movw	r24, r28
 434:	87 53       	subi	r24, 0x37	; 55
 436:	9f 4f       	sbci	r25, 0xFF	; 255
 438:	0e 94 d5 03 	call	0x7aa	; 0x7aa <atoi>
 43c:	00 0f       	add	r16, r16
 43e:	11 1f       	adc	r17, r17
 440:	e1 e0       	ldi	r30, 0x01	; 1
 442:	f0 e0       	ldi	r31, 0x00	; 0
 444:	ec 0f       	add	r30, r28
 446:	fd 1f       	adc	r31, r29
 448:	e0 0f       	add	r30, r16
 44a:	f1 1f       	adc	r31, r17
 44c:	91 83       	std	Z+1, r25	; 0x01
 44e:	80 83       	st	Z, r24
 450:	01 c0       	rjmp	.+2      	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 452:	78 01       	movw	r14, r16
 				}
				///////////////////////////////////////////////////// End Of Confirming. //////////////////////////////
				LCD_clear(); // Clearing The LCD To Be Ready To Show The New Number.
 454:	0e 94 a7 01 	call	0x34e	; 0x34e <LCD_clear>
		}
	}
	/////////////////////// If You Reached Here, That Means You Stopped Entering Numbers And Ready To See Them In Sorted Manner... ///////////////////////
	
	
	bubbleSort(numbers, index); // Sorting...
 458:	b7 01       	movw	r22, r14
 45a:	ce 01       	movw	r24, r28
 45c:	01 96       	adiw	r24, 0x01	; 1
 45e:	0e 94 ab 01 	call	0x356	; 0x356 <bubbleSort>
	
	LCD_string("In SORTED Manner: ");
 462:	8f e7       	ldi	r24, 0x7F	; 127
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	0e 94 91 01 	call	0x322	; 0x322 <LCD_string>
 46a:	9f ef       	ldi	r25, 0xFF	; 255
 46c:	29 e6       	ldi	r18, 0x69	; 105
 46e:	88 e1       	ldi	r24, 0x18	; 24
 470:	91 50       	subi	r25, 0x01	; 1
 472:	20 40       	sbci	r18, 0x00	; 0
 474:	80 40       	sbci	r24, 0x00	; 0
 476:	e1 f7       	brne	.-8      	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
 478:	00 c0       	rjmp	.+0      	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
 47a:	00 00       	nop
	_delay_ms(500);
	LCD_clear();
 47c:	0e 94 a7 01 	call	0x34e	; 0x34e <LCD_clear>
	////////////////////////////// Show The Sorted Array  On LCD. //////////////////////////////
	for (int i = 0; i < index; i ++) {
 480:	00 e0       	ldi	r16, 0x00	; 0
 482:	10 e0       	ldi	r17, 0x00	; 0
 484:	6a c0       	rjmp	.+212    	; 0x55a <__EEPROM_REGION_LENGTH__+0x15a>
				///////////////////////////////////////////////////// End Of Confirming. //////////////////////////////
				LCD_clear(); // Clearing The LCD To Be Ready To Show The New Number.
				
				break; // End Of Entering Numbers.
			}
			else if(value == 'C' /*|| i == 4*/) {// If The Input Character Is 'C', Then Confirm The Number And Make The LCD Ready To Receive New values.
 486:	83 34       	cpi	r24, 0x43	; 67
 488:	41 f5       	brne	.+80     	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
				
				if(i < 4) 
 48a:	94 e0       	ldi	r25, 0x04	; 4
 48c:	e9 16       	cp	r14, r25
 48e:	f1 04       	cpc	r15, r1
 490:	3c f4       	brge	.+14     	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
					str[i] = '\0';
 492:	e9 ec       	ldi	r30, 0xC9	; 201
 494:	f0 e0       	ldi	r31, 0x00	; 0
 496:	ec 0f       	add	r30, r28
 498:	fd 1f       	adc	r31, r29
 49a:	ee 0d       	add	r30, r14
 49c:	ff 1d       	adc	r31, r15
 49e:	10 82       	st	Z, r1
			
				numbers[index ++] = atoi(str);
 4a0:	78 01       	movw	r14, r16
 4a2:	2f ef       	ldi	r18, 0xFF	; 255
 4a4:	e2 1a       	sub	r14, r18
 4a6:	f2 0a       	sbc	r15, r18
 4a8:	ce 01       	movw	r24, r28
 4aa:	87 53       	subi	r24, 0x37	; 55
 4ac:	9f 4f       	sbci	r25, 0xFF	; 255
 4ae:	0e 94 d5 03 	call	0x7aa	; 0x7aa <atoi>
 4b2:	00 0f       	add	r16, r16
 4b4:	11 1f       	adc	r17, r17
 4b6:	e1 e0       	ldi	r30, 0x01	; 1
 4b8:	f0 e0       	ldi	r31, 0x00	; 0
 4ba:	ec 0f       	add	r30, r28
 4bc:	fd 1f       	adc	r31, r29
 4be:	e0 0f       	add	r30, r16
 4c0:	f1 1f       	adc	r31, r17
 4c2:	91 83       	std	Z+1, r25	; 0x01
 4c4:	80 83       	st	Z, r24
				i = 0;  // You Know Why.
				
				LCD_clear();
 4c6:	0e 94 a7 01 	call	0x34e	; 0x34e <LCD_clear>
				LCD_string("ENTER NUMBER: ");
 4ca:	80 e7       	ldi	r24, 0x70	; 112
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	0e 94 91 01 	call	0x322	; 0x322 <LCD_string>
			else if(value == 'C' /*|| i == 4*/) {// If The Input Character Is 'C', Then Confirm The Number And Make The LCD Ready To Receive New values.
				
				if(i < 4) 
					str[i] = '\0';
			
				numbers[index ++] = atoi(str);
 4d2:	87 01       	movw	r16, r14
				i = 0;  // You Know Why.
 4d4:	e1 2c       	mov	r14, r1
 4d6:	f1 2c       	mov	r15, r1
 4d8:	94 cf       	rjmp	.-216    	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
				
				LCD_clear();
				LCD_string("ENTER NUMBER: ");
			}
			else {
				str[i] = value; i ++; // Receiving The New Numbers' Digits.
 4da:	e9 ec       	ldi	r30, 0xC9	; 201
 4dc:	f0 e0       	ldi	r31, 0x00	; 0
 4de:	ec 0f       	add	r30, r28
 4e0:	fd 1f       	adc	r31, r29
 4e2:	ee 0d       	add	r30, r14
 4e4:	ff 1d       	adc	r31, r15
 4e6:	80 83       	st	Z, r24
 4e8:	9f ef       	ldi	r25, 0xFF	; 255
 4ea:	e9 1a       	sub	r14, r25
 4ec:	f9 0a       	sbc	r15, r25
				
				LCD_writeChar(value); // Write The Digit On The LCD.
 4ee:	0e 94 4a 01 	call	0x294	; 0x294 <LCD_writeChar>
 4f2:	87 cf       	rjmp	.-242    	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
	_delay_ms(500);
	LCD_clear();
	////////////////////////////// Show The Sorted Array  On LCD. //////////////////////////////
	for (int i = 0; i < index; i ++) {
		unsigned char s[4];  //Array Of Characters To Store The Converted Number Into String Into. 
		itoa(numbers[i], s, 10); // Function Take Integer Value And Array Of Characters And Numbering Base 
 4f4:	f8 01       	movw	r30, r16
 4f6:	ee 0f       	add	r30, r30
 4f8:	ff 1f       	adc	r31, r31
 4fa:	81 e0       	ldi	r24, 0x01	; 1
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	8c 0f       	add	r24, r28
 500:	9d 1f       	adc	r25, r29
 502:	e8 0f       	add	r30, r24
 504:	f9 1f       	adc	r31, r25
 506:	4a e0       	ldi	r20, 0x0A	; 10
 508:	50 e0       	ldi	r21, 0x00	; 0
 50a:	be 01       	movw	r22, r28
 50c:	63 53       	subi	r22, 0x33	; 51
 50e:	7f 4f       	sbci	r23, 0xFF	; 255
 510:	80 81       	ld	r24, Z
 512:	91 81       	ldd	r25, Z+1	; 0x01
 514:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <itoa>
								 // And Some How Return The Number As Array Of Characters.
		LCD_string(s); // Showing The Number On The LCD.
 518:	ce 01       	movw	r24, r28
 51a:	83 53       	subi	r24, 0x33	; 51
 51c:	9f 4f       	sbci	r25, 0xFF	; 255
 51e:	0e 94 91 01 	call	0x322	; 0x322 <LCD_string>
		
		if(i != index - 1)
 522:	67 01       	movw	r12, r14
 524:	91 e0       	ldi	r25, 0x01	; 1
 526:	c9 1a       	sub	r12, r25
 528:	d1 08       	sbc	r13, r1
 52a:	0c 15       	cp	r16, r12
 52c:	1d 05       	cpc	r17, r13
 52e:	21 f0       	breq	.+8      	; 0x538 <__EEPROM_REGION_LENGTH__+0x138>
			LCD_string(", ");
 530:	82 e9       	ldi	r24, 0x92	; 146
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	0e 94 91 01 	call	0x322	; 0x322 <LCD_string>
		if(i == index - 1)
 538:	0c 15       	cp	r16, r12
 53a:	1d 05       	cpc	r17, r13
 53c:	19 f4       	brne	.+6      	; 0x544 <__EEPROM_REGION_LENGTH__+0x144>
			LCD_writeChar('.');
 53e:	8e e2       	ldi	r24, 0x2E	; 46
 540:	0e 94 4a 01 	call	0x294	; 0x294 <LCD_writeChar>
 544:	2f ef       	ldi	r18, 0xFF	; 255
 546:	85 ea       	ldi	r24, 0xA5	; 165
 548:	9e e0       	ldi	r25, 0x0E	; 14
 54a:	21 50       	subi	r18, 0x01	; 1
 54c:	80 40       	sbci	r24, 0x00	; 0
 54e:	90 40       	sbci	r25, 0x00	; 0
 550:	e1 f7       	brne	.-8      	; 0x54a <__EEPROM_REGION_LENGTH__+0x14a>
 552:	00 c0       	rjmp	.+0      	; 0x554 <__EEPROM_REGION_LENGTH__+0x154>
 554:	00 00       	nop
	
	LCD_string("In SORTED Manner: ");
	_delay_ms(500);
	LCD_clear();
	////////////////////////////// Show The Sorted Array  On LCD. //////////////////////////////
	for (int i = 0; i < index; i ++) {
 556:	0f 5f       	subi	r16, 0xFF	; 255
 558:	1f 4f       	sbci	r17, 0xFF	; 255
 55a:	0e 15       	cp	r16, r14
 55c:	1f 05       	cpc	r17, r15
 55e:	54 f2       	brlt	.-108    	; 0x4f4 <__EEPROM_REGION_LENGTH__+0xf4>
 560:	00 e0       	ldi	r16, 0x00	; 0
 562:	10 e0       	ldi	r17, 0x00	; 0
 564:	11 c0       	rjmp	.+34     	; 0x588 <__EEPROM_REGION_LENGTH__+0x188>
	
	
	// Displaying The Numbers On 7SEG.
	for (int i = 0; i < index; i ++)
	{
		display_number(numbers[i]);
 566:	f8 01       	movw	r30, r16
 568:	ee 0f       	add	r30, r30
 56a:	ff 1f       	adc	r31, r31
 56c:	81 e0       	ldi	r24, 0x01	; 1
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	8c 0f       	add	r24, r28
 572:	9d 1f       	adc	r25, r29
 574:	e8 0f       	add	r30, r24
 576:	f9 1f       	adc	r31, r25
 578:	80 81       	ld	r24, Z
 57a:	91 81       	ldd	r25, Z+1	; 0x01
 57c:	0e 94 01 03 	call	0x602	; 0x602 <display_number>
		CLEAR_SEV_SEG();
 580:	0e 94 77 03 	call	0x6ee	; 0x6ee <CLEAR_SEV_SEG>
		_delay_ms(300);
	}
	
	
	// Displaying The Numbers On 7SEG.
	for (int i = 0; i < index; i ++)
 584:	0f 5f       	subi	r16, 0xFF	; 255
 586:	1f 4f       	sbci	r17, 0xFF	; 255
 588:	0e 15       	cp	r16, r14
 58a:	1f 05       	cpc	r17, r15
 58c:	64 f3       	brlt	.-40     	; 0x566 <__EEPROM_REGION_LENGTH__+0x166>
	{
		display_number(numbers[i]);
		CLEAR_SEV_SEG();
	}
}
 58e:	80 e0       	ldi	r24, 0x00	; 0
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	c0 53       	subi	r28, 0x30	; 48
 594:	df 4f       	sbci	r29, 0xFF	; 255
 596:	0f b6       	in	r0, 0x3f	; 63
 598:	f8 94       	cli
 59a:	de bf       	out	0x3e, r29	; 62
 59c:	0f be       	out	0x3f, r0	; 63
 59e:	cd bf       	out	0x3d, r28	; 61
 5a0:	df 91       	pop	r29
 5a2:	cf 91       	pop	r28
 5a4:	1f 91       	pop	r17
 5a6:	0f 91       	pop	r16
 5a8:	ff 90       	pop	r15
 5aa:	ef 90       	pop	r14
 5ac:	df 90       	pop	r13
 5ae:	cf 90       	pop	r12
 5b0:	08 95       	ret

000005b2 <SEVEN_SEG_INIT>:
#include "BIT_MATH.h"
/*#include "std_types.h"*/

void SEVEN_SEG_INIT(void)
{
	SET_BIT(DDRA,2); //enable the second seven segment 
 5b2:	8a b3       	in	r24, 0x1a	; 26
 5b4:	84 60       	ori	r24, 0x04	; 4
 5b6:	8a bb       	out	0x1a, r24	; 26

    SET_BIT(DDRA,3);
 5b8:	8a b3       	in	r24, 0x1a	; 26
 5ba:	88 60       	ori	r24, 0x08	; 8
 5bc:	8a bb       	out	0x1a, r24	; 26
   // SET_BIT(PORTA,3);	
	SET_BIT(DDRB,5);
 5be:	87 b3       	in	r24, 0x17	; 23
 5c0:	80 62       	ori	r24, 0x20	; 32
 5c2:	87 bb       	out	0x17, r24	; 23
	SET_BIT(DDRB,6);
 5c4:	87 b3       	in	r24, 0x17	; 23
 5c6:	80 64       	ori	r24, 0x40	; 64
 5c8:	87 bb       	out	0x17, r24	; 23
	PORTB &= 0b11101000;
 5ca:	88 b3       	in	r24, 0x18	; 24
 5cc:	88 7e       	andi	r24, 0xE8	; 232
 5ce:	88 bb       	out	0x18, r24	; 24
	
	SET_BIT(DDRB,0);
 5d0:	87 b3       	in	r24, 0x17	; 23
 5d2:	81 60       	ori	r24, 0x01	; 1
 5d4:	87 bb       	out	0x17, r24	; 23
	SET_BIT(DDRB,1);
 5d6:	87 b3       	in	r24, 0x17	; 23
 5d8:	82 60       	ori	r24, 0x02	; 2
 5da:	87 bb       	out	0x17, r24	; 23
	SET_BIT(DDRB,2);
 5dc:	87 b3       	in	r24, 0x17	; 23
 5de:	84 60       	ori	r24, 0x04	; 4
 5e0:	87 bb       	out	0x17, r24	; 23
	SET_BIT(DDRB,4);
 5e2:	87 b3       	in	r24, 0x17	; 23
 5e4:	80 61       	ori	r24, 0x10	; 16
 5e6:	87 bb       	out	0x17, r24	; 23
 5e8:	08 95       	ret

000005ea <SEVEN_SEG_Display>:
	
}

void SEVEN_SEG_Display(int num)
{
	PORTB&= 0b11101000;
 5ea:	28 b3       	in	r18, 0x18	; 24
 5ec:	28 7e       	andi	r18, 0xE8	; 232
 5ee:	28 bb       	out	0x18, r18	; 24
	PORTB = (((num & 0b00001000) << 1) | (num & 0b00000111));
 5f0:	9c 01       	movw	r18, r24
 5f2:	28 70       	andi	r18, 0x08	; 8
 5f4:	33 27       	eor	r19, r19
 5f6:	22 0f       	add	r18, r18
 5f8:	33 1f       	adc	r19, r19
 5fa:	87 70       	andi	r24, 0x07	; 7
 5fc:	28 2b       	or	r18, r24
 5fe:	28 bb       	out	0x18, r18	; 24
 600:	08 95       	ret

00000602 <display_number>:
}

void display_number(int number)
{
 602:	af 92       	push	r10
 604:	bf 92       	push	r11
 606:	cf 92       	push	r12
 608:	df 92       	push	r13
 60a:	ef 92       	push	r14
 60c:	ff 92       	push	r15
 60e:	0f 93       	push	r16
 610:	1f 93       	push	r17
 612:	cf 93       	push	r28
 614:	df 93       	push	r29
 616:	fc 01       	movw	r30, r24
	int digit4 = ( number / 1000) % 10;//100    =0
 618:	68 ee       	ldi	r22, 0xE8	; 232
 61a:	73 e0       	ldi	r23, 0x03	; 3
 61c:	0e 94 ad 03 	call	0x75a	; 0x75a <__divmodhi4>
 620:	cb 01       	movw	r24, r22
 622:	2a e0       	ldi	r18, 0x0A	; 10
 624:	30 e0       	ldi	r19, 0x00	; 0
 626:	b9 01       	movw	r22, r18
 628:	0e 94 ad 03 	call	0x75a	; 0x75a <__divmodhi4>
 62c:	7c 01       	movw	r14, r24
	int digit3 = ( number / 100) % 10;//100
 62e:	cf 01       	movw	r24, r30
 630:	64 e6       	ldi	r22, 0x64	; 100
 632:	70 e0       	ldi	r23, 0x00	; 0
 634:	0e 94 ad 03 	call	0x75a	; 0x75a <__divmodhi4>
 638:	cb 01       	movw	r24, r22
 63a:	b9 01       	movw	r22, r18
 63c:	0e 94 ad 03 	call	0x75a	; 0x75a <__divmodhi4>
 640:	8c 01       	movw	r16, r24
	int digit2 = ( number / 10) % 10;
 642:	cf 01       	movw	r24, r30
 644:	b9 01       	movw	r22, r18
 646:	0e 94 ad 03 	call	0x75a	; 0x75a <__divmodhi4>
 64a:	a8 2e       	mov	r10, r24
 64c:	b9 2e       	mov	r11, r25
 64e:	cb 01       	movw	r24, r22
 650:	b9 01       	movw	r22, r18
 652:	0e 94 ad 03 	call	0x75a	; 0x75a <__divmodhi4>
 656:	ec 01       	movw	r28, r24
	int digit1 =  (number/ 1 ) % 10;

	// Display the digits on the four-digit seven-segment display
	unsigned int start_time = 0;
 658:	c1 2c       	mov	r12, r1
 65a:	d1 2c       	mov	r13, r1
	while (start_time < 500) // Delay for 1 seconds
 65c:	38 c0       	rjmp	.+112    	; 0x6ce <display_number+0xcc>
	{

		SEVEN_SEG_Display(digit4);
 65e:	c7 01       	movw	r24, r14
 660:	0e 94 f5 02 	call	0x5ea	; 0x5ea <SEVEN_SEG_Display>
 664:	8f e3       	ldi	r24, 0x3F	; 63
 666:	9f e1       	ldi	r25, 0x1F	; 31
 668:	01 97       	sbiw	r24, 0x01	; 1
 66a:	f1 f7       	brne	.-4      	; 0x668 <display_number+0x66>
 66c:	00 c0       	rjmp	.+0      	; 0x66e <display_number+0x6c>
 66e:	00 00       	nop
		_delay_ms(2);
		TOGGLE_BIT(PORTB,6);
 670:	88 b3       	in	r24, 0x18	; 24
 672:	20 e4       	ldi	r18, 0x40	; 64
 674:	28 27       	eor	r18, r24
 676:	28 bb       	out	0x18, r18	; 24
		SEVEN_SEG_Display(digit3);
 678:	c8 01       	movw	r24, r16
 67a:	0e 94 f5 02 	call	0x5ea	; 0x5ea <SEVEN_SEG_Display>
 67e:	8f e3       	ldi	r24, 0x3F	; 63
 680:	9f e1       	ldi	r25, 0x1F	; 31
 682:	01 97       	sbiw	r24, 0x01	; 1
 684:	f1 f7       	brne	.-4      	; 0x682 <display_number+0x80>
 686:	00 c0       	rjmp	.+0      	; 0x688 <display_number+0x86>
 688:	00 00       	nop
		_delay_ms(2);
		TOGGLE_BIT(PORTB,5);
 68a:	88 b3       	in	r24, 0x18	; 24
 68c:	20 e2       	ldi	r18, 0x20	; 32
 68e:	28 27       	eor	r18, r24
 690:	28 bb       	out	0x18, r18	; 24
		SEVEN_SEG_Display(digit2);
 692:	ce 01       	movw	r24, r28
 694:	0e 94 f5 02 	call	0x5ea	; 0x5ea <SEVEN_SEG_Display>
 698:	8f e3       	ldi	r24, 0x3F	; 63
 69a:	9f e1       	ldi	r25, 0x1F	; 31
 69c:	01 97       	sbiw	r24, 0x01	; 1
 69e:	f1 f7       	brne	.-4      	; 0x69c <display_number+0x9a>
 6a0:	00 c0       	rjmp	.+0      	; 0x6a2 <display_number+0xa0>
 6a2:	00 00       	nop
		_delay_ms(2);
		TOGGLE_BIT(PORTA,2);
 6a4:	8b b3       	in	r24, 0x1b	; 27
 6a6:	24 e0       	ldi	r18, 0x04	; 4
 6a8:	28 27       	eor	r18, r24
 6aa:	2b bb       	out	0x1b, r18	; 27
		SEVEN_SEG_Display(digit1);
 6ac:	8a 2d       	mov	r24, r10
 6ae:	9b 2d       	mov	r25, r11
 6b0:	0e 94 f5 02 	call	0x5ea	; 0x5ea <SEVEN_SEG_Display>
 6b4:	8f e3       	ldi	r24, 0x3F	; 63
 6b6:	9f e1       	ldi	r25, 0x1F	; 31
 6b8:	01 97       	sbiw	r24, 0x01	; 1
 6ba:	f1 f7       	brne	.-4      	; 0x6b8 <display_number+0xb6>
 6bc:	00 c0       	rjmp	.+0      	; 0x6be <display_number+0xbc>
 6be:	00 00       	nop
		_delay_ms(2);
		TOGGLE_BIT(PORTA,3);
 6c0:	8b b3       	in	r24, 0x1b	; 27
 6c2:	28 e0       	ldi	r18, 0x08	; 8
 6c4:	28 27       	eor	r18, r24
 6c6:	2b bb       	out	0x1b, r18	; 27

		start_time += 5;
 6c8:	95 e0       	ldi	r25, 0x05	; 5
 6ca:	c9 0e       	add	r12, r25
 6cc:	d1 1c       	adc	r13, r1
	int digit2 = ( number / 10) % 10;
	int digit1 =  (number/ 1 ) % 10;

	// Display the digits on the four-digit seven-segment display
	unsigned int start_time = 0;
	while (start_time < 500) // Delay for 1 seconds
 6ce:	84 ef       	ldi	r24, 0xF4	; 244
 6d0:	c8 16       	cp	r12, r24
 6d2:	81 e0       	ldi	r24, 0x01	; 1
 6d4:	d8 06       	cpc	r13, r24
 6d6:	18 f2       	brcs	.-122    	; 0x65e <display_number+0x5c>

		start_time += 5;


	}
}
 6d8:	df 91       	pop	r29
 6da:	cf 91       	pop	r28
 6dc:	1f 91       	pop	r17
 6de:	0f 91       	pop	r16
 6e0:	ff 90       	pop	r15
 6e2:	ef 90       	pop	r14
 6e4:	df 90       	pop	r13
 6e6:	cf 90       	pop	r12
 6e8:	bf 90       	pop	r11
 6ea:	af 90       	pop	r10
 6ec:	08 95       	ret

000006ee <CLEAR_SEV_SEG>:
void CLEAR_SEV_SEG()
{
	SET_BIT(PORTB,6);
 6ee:	88 b3       	in	r24, 0x18	; 24
 6f0:	80 64       	ori	r24, 0x40	; 64
 6f2:	88 bb       	out	0x18, r24	; 24
	SET_BIT(PORTB,5);
 6f4:	88 b3       	in	r24, 0x18	; 24
 6f6:	80 62       	ori	r24, 0x20	; 32
 6f8:	88 bb       	out	0x18, r24	; 24
	SET_BIT(PORTA,2);
 6fa:	8b b3       	in	r24, 0x1b	; 27
 6fc:	84 60       	ori	r24, 0x04	; 4
 6fe:	8b bb       	out	0x1b, r24	; 27
	SET_BIT(PORTA,3);
 700:	8b b3       	in	r24, 0x1b	; 27
 702:	88 60       	ori	r24, 0x08	; 8
 704:	8b bb       	out	0x1b, r24	; 27
 706:	08 95       	ret

00000708 <__vector_11>:

void (*g_callBackPtr)(void) = ((void*)0);

//Timer0 Interrupt service Routine
ISR(TIMER0_OVF_vect)
{
 708:	1f 92       	push	r1
 70a:	0f 92       	push	r0
 70c:	0f b6       	in	r0, 0x3f	; 63
 70e:	0f 92       	push	r0
 710:	11 24       	eor	r1, r1
 712:	2f 93       	push	r18
 714:	3f 93       	push	r19
 716:	4f 93       	push	r20
 718:	5f 93       	push	r21
 71a:	6f 93       	push	r22
 71c:	7f 93       	push	r23
 71e:	8f 93       	push	r24
 720:	9f 93       	push	r25
 722:	af 93       	push	r26
 724:	bf 93       	push	r27
 726:	ef 93       	push	r30
 728:	ff 93       	push	r31
	if(g_callBackPtr != ((void*)0))
 72a:	e0 91 96 00 	lds	r30, 0x0096	; 0x800096 <__data_end>
 72e:	f0 91 97 00 	lds	r31, 0x0097	; 0x800097 <__data_end+0x1>
 732:	30 97       	sbiw	r30, 0x00	; 0
 734:	09 f0       	breq	.+2      	; 0x738 <__vector_11+0x30>
	{
		(*g_callBackPtr)();
 736:	09 95       	icall
	}
}
 738:	ff 91       	pop	r31
 73a:	ef 91       	pop	r30
 73c:	bf 91       	pop	r27
 73e:	af 91       	pop	r26
 740:	9f 91       	pop	r25
 742:	8f 91       	pop	r24
 744:	7f 91       	pop	r23
 746:	6f 91       	pop	r22
 748:	5f 91       	pop	r21
 74a:	4f 91       	pop	r20
 74c:	3f 91       	pop	r19
 74e:	2f 91       	pop	r18
 750:	0f 90       	pop	r0
 752:	0f be       	out	0x3f, r0	; 63
 754:	0f 90       	pop	r0
 756:	1f 90       	pop	r1
 758:	18 95       	reti

0000075a <__divmodhi4>:
 75a:	97 fb       	bst	r25, 7
 75c:	07 2e       	mov	r0, r23
 75e:	16 f4       	brtc	.+4      	; 0x764 <__divmodhi4+0xa>
 760:	00 94       	com	r0
 762:	07 d0       	rcall	.+14     	; 0x772 <__divmodhi4_neg1>
 764:	77 fd       	sbrc	r23, 7
 766:	09 d0       	rcall	.+18     	; 0x77a <__divmodhi4_neg2>
 768:	0e 94 c1 03 	call	0x782	; 0x782 <__udivmodhi4>
 76c:	07 fc       	sbrc	r0, 7
 76e:	05 d0       	rcall	.+10     	; 0x77a <__divmodhi4_neg2>
 770:	3e f4       	brtc	.+14     	; 0x780 <__divmodhi4_exit>

00000772 <__divmodhi4_neg1>:
 772:	90 95       	com	r25
 774:	81 95       	neg	r24
 776:	9f 4f       	sbci	r25, 0xFF	; 255
 778:	08 95       	ret

0000077a <__divmodhi4_neg2>:
 77a:	70 95       	com	r23
 77c:	61 95       	neg	r22
 77e:	7f 4f       	sbci	r23, 0xFF	; 255

00000780 <__divmodhi4_exit>:
 780:	08 95       	ret

00000782 <__udivmodhi4>:
 782:	aa 1b       	sub	r26, r26
 784:	bb 1b       	sub	r27, r27
 786:	51 e1       	ldi	r21, 0x11	; 17
 788:	07 c0       	rjmp	.+14     	; 0x798 <__udivmodhi4_ep>

0000078a <__udivmodhi4_loop>:
 78a:	aa 1f       	adc	r26, r26
 78c:	bb 1f       	adc	r27, r27
 78e:	a6 17       	cp	r26, r22
 790:	b7 07       	cpc	r27, r23
 792:	10 f0       	brcs	.+4      	; 0x798 <__udivmodhi4_ep>
 794:	a6 1b       	sub	r26, r22
 796:	b7 0b       	sbc	r27, r23

00000798 <__udivmodhi4_ep>:
 798:	88 1f       	adc	r24, r24
 79a:	99 1f       	adc	r25, r25
 79c:	5a 95       	dec	r21
 79e:	a9 f7       	brne	.-22     	; 0x78a <__udivmodhi4_loop>
 7a0:	80 95       	com	r24
 7a2:	90 95       	com	r25
 7a4:	bc 01       	movw	r22, r24
 7a6:	cd 01       	movw	r24, r26
 7a8:	08 95       	ret

000007aa <atoi>:
 7aa:	fc 01       	movw	r30, r24
 7ac:	88 27       	eor	r24, r24
 7ae:	99 27       	eor	r25, r25
 7b0:	e8 94       	clt
 7b2:	21 91       	ld	r18, Z+
 7b4:	20 32       	cpi	r18, 0x20	; 32
 7b6:	e9 f3       	breq	.-6      	; 0x7b2 <atoi+0x8>
 7b8:	29 30       	cpi	r18, 0x09	; 9
 7ba:	10 f0       	brcs	.+4      	; 0x7c0 <atoi+0x16>
 7bc:	2e 30       	cpi	r18, 0x0E	; 14
 7be:	c8 f3       	brcs	.-14     	; 0x7b2 <atoi+0x8>
 7c0:	2b 32       	cpi	r18, 0x2B	; 43
 7c2:	41 f0       	breq	.+16     	; 0x7d4 <atoi+0x2a>
 7c4:	2d 32       	cpi	r18, 0x2D	; 45
 7c6:	39 f4       	brne	.+14     	; 0x7d6 <atoi+0x2c>
 7c8:	68 94       	set
 7ca:	04 c0       	rjmp	.+8      	; 0x7d4 <atoi+0x2a>
 7cc:	0e 94 09 04 	call	0x812	; 0x812 <__mulhi_const_10>
 7d0:	82 0f       	add	r24, r18
 7d2:	91 1d       	adc	r25, r1
 7d4:	21 91       	ld	r18, Z+
 7d6:	20 53       	subi	r18, 0x30	; 48
 7d8:	2a 30       	cpi	r18, 0x0A	; 10
 7da:	c0 f3       	brcs	.-16     	; 0x7cc <atoi+0x22>
 7dc:	1e f4       	brtc	.+6      	; 0x7e4 <atoi+0x3a>
 7de:	90 95       	com	r25
 7e0:	81 95       	neg	r24
 7e2:	9f 4f       	sbci	r25, 0xFF	; 255
 7e4:	08 95       	ret

000007e6 <itoa>:
 7e6:	45 32       	cpi	r20, 0x25	; 37
 7e8:	51 05       	cpc	r21, r1
 7ea:	20 f4       	brcc	.+8      	; 0x7f4 <itoa+0xe>
 7ec:	42 30       	cpi	r20, 0x02	; 2
 7ee:	10 f0       	brcs	.+4      	; 0x7f4 <itoa+0xe>
 7f0:	0c 94 fe 03 	jmp	0x7fc	; 0x7fc <__itoa_ncheck>
 7f4:	fb 01       	movw	r30, r22
 7f6:	10 82       	st	Z, r1
 7f8:	cb 01       	movw	r24, r22
 7fa:	08 95       	ret

000007fc <__itoa_ncheck>:
 7fc:	bb 27       	eor	r27, r27
 7fe:	4a 30       	cpi	r20, 0x0A	; 10
 800:	31 f4       	brne	.+12     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 802:	99 23       	and	r25, r25
 804:	22 f4       	brpl	.+8      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 806:	bd e2       	ldi	r27, 0x2D	; 45
 808:	90 95       	com	r25
 80a:	81 95       	neg	r24
 80c:	9f 4f       	sbci	r25, 0xFF	; 255
 80e:	0c 94 12 04 	jmp	0x824	; 0x824 <__utoa_common>

00000812 <__mulhi_const_10>:
 812:	7a e0       	ldi	r23, 0x0A	; 10
 814:	97 9f       	mul	r25, r23
 816:	90 2d       	mov	r25, r0
 818:	87 9f       	mul	r24, r23
 81a:	80 2d       	mov	r24, r0
 81c:	91 0d       	add	r25, r1
 81e:	11 24       	eor	r1, r1
 820:	08 95       	ret

00000822 <__utoa_ncheck>:
 822:	bb 27       	eor	r27, r27

00000824 <__utoa_common>:
 824:	fb 01       	movw	r30, r22
 826:	55 27       	eor	r21, r21
 828:	aa 27       	eor	r26, r26
 82a:	88 0f       	add	r24, r24
 82c:	99 1f       	adc	r25, r25
 82e:	aa 1f       	adc	r26, r26
 830:	a4 17       	cp	r26, r20
 832:	10 f0       	brcs	.+4      	; 0x838 <__utoa_common+0x14>
 834:	a4 1b       	sub	r26, r20
 836:	83 95       	inc	r24
 838:	50 51       	subi	r21, 0x10	; 16
 83a:	b9 f7       	brne	.-18     	; 0x82a <__utoa_common+0x6>
 83c:	a0 5d       	subi	r26, 0xD0	; 208
 83e:	aa 33       	cpi	r26, 0x3A	; 58
 840:	08 f0       	brcs	.+2      	; 0x844 <__utoa_common+0x20>
 842:	a9 5d       	subi	r26, 0xD9	; 217
 844:	a1 93       	st	Z+, r26
 846:	00 97       	sbiw	r24, 0x00	; 0
 848:	79 f7       	brne	.-34     	; 0x828 <__utoa_common+0x4>
 84a:	b1 11       	cpse	r27, r1
 84c:	b1 93       	st	Z+, r27
 84e:	11 92       	st	Z+, r1
 850:	cb 01       	movw	r24, r22
 852:	0c 94 2b 04 	jmp	0x856	; 0x856 <strrev>

00000856 <strrev>:
 856:	dc 01       	movw	r26, r24
 858:	fc 01       	movw	r30, r24
 85a:	67 2f       	mov	r22, r23
 85c:	71 91       	ld	r23, Z+
 85e:	77 23       	and	r23, r23
 860:	e1 f7       	brne	.-8      	; 0x85a <strrev+0x4>
 862:	32 97       	sbiw	r30, 0x02	; 2
 864:	04 c0       	rjmp	.+8      	; 0x86e <__stack+0xf>
 866:	7c 91       	ld	r23, X
 868:	6d 93       	st	X+, r22
 86a:	70 83       	st	Z, r23
 86c:	62 91       	ld	r22, -Z
 86e:	ae 17       	cp	r26, r30
 870:	bf 07       	cpc	r27, r31
 872:	c8 f3       	brcs	.-14     	; 0x866 <__stack+0x7>
 874:	08 95       	ret

00000876 <_exit>:
 876:	f8 94       	cli

00000878 <__stop_program>:
 878:	ff cf       	rjmp	.-2      	; 0x878 <__stop_program>
